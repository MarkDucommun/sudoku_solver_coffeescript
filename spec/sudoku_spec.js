// Generated by CoffeeScript 1.6.3
(function() {
  var Sudoku, solved, unsolved, _;

  _ = require('underscore')._;

  Sudoku = require('../sudoku');

  unsolved = '619030040270061008000047621486302079000014580031009060005720806320106057160400030';

  solved = '619238745274561398853947621486352179792614583531879264945723816328196457167485932';

  describe('a new Sudoku game', function() {
    it('reads a puzzle string where unfilled spaces are zeros', function() {
      var sudoku;
      sudoku = new Sudoku(unsolved);
      return expect(sudoku.position(3)).toBe(0);
    });
    it('can tell if the puzzle is solved', function() {
      var sudoku;
      sudoku = new Sudoku(solved);
      return expect(sudoku.solved()).toBe(true);
    });
    it('can tell if a set is solved', function() {
      var sudoku;
      sudoku = new Sudoku(solved);
      return expect(sudoku.setSolved([6, 1, 9, 2, 3, 8, 7, 4, 5])).toBe(true);
    });
    it('can get a specified row', function() {
      var expected, row, sudoku;
      sudoku = new Sudoku(unsolved);
      expected = [6, 1, 9, 0, 3, 0, 0, 4, 0];
      row = sudoku.getSet(0, sudoku.rowIndex);
      return _.each(expected, function(a, i) {
        return expect(row[i]).toBe(a);
      });
    });
    it('can get a specified column', function() {
      var column, expected, sudoku;
      sudoku = new Sudoku(unsolved);
      expected = [6, 2, 0, 4, 0, 0, 0, 3, 1];
      column = sudoku.getSet(0, sudoku.columnIndex);
      return _.each(expected, function(a, i) {
        return expect(column[i]).toBe(a);
      });
    });
    it('can get a specified box', function() {
      var box, expected, sudoku;
      sudoku = new Sudoku(unsolved);
      expected = [6, 1, 9, 2, 7, 0, 0, 0, 0];
      box = sudoku.getSet(0, sudoku.boxIndex);
      return _.each(expected, function(a, i) {
        return expect(box[i]).toBe(a);
      });
    });
    it('can get an entries row index', function() {
      var sudoku;
      sudoku = new Sudoku('0');
      return expect(sudoku.rowIndex(9)).toBe(1);
    });
    it('can get an entries column index', function() {
      var sudoku;
      sudoku = new Sudoku('0');
      return expect(sudoku.columnIndex(9)).toBe(0);
    });
    it('can get an entries box index', function() {
      var sudoku;
      sudoku = new Sudoku('0');
      return expect(sudoku.boxIndex(5)).toBe(1);
    });
    return it('can guess the first unsolved entry', function() {
      var sudoku;
      return sudoku = new Sudoku(unsolved);
    });
  });

}).call(this);
