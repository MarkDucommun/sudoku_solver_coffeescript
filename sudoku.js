// Generated by CoffeeScript 1.6.3
(function() {
  var Sudoku, _;

  _ = require('underscore')._;

  Sudoku = (function() {
    function Sudoku(puzzleString) {
      this.puzzle = _.map(puzzleString.split(''), function(a) {
        return parseInt(a);
      });
    }

    Sudoku.prototype.position = function(i) {
      return this.puzzle[i];
    };

    Sudoku.prototype.solved = function() {
      var result, that;
      that = this;
      result = true;
      _.map([0, 1, 2, 3, 4, 5, 6, 7, 8], function(i) {
        if (!that.setSolved(that.getSet(i, that.rowIndex))) {
          result = false;
        }
        if (!that.setSolved(that.getSet(i, that.columnIndex))) {
          result = false;
        }
        if (!that.setSolved(that.getSet(i, that.boxIndex))) {
          return result = false;
        }
      });
      return result;
    };

    Sudoku.prototype.setSolved = function(set) {
      return _.reduce(set, function(memo, num) {
        return memo + num;
      }) === 45;
    };

    Sudoku.prototype.getSet = function(index, indexFunction) {
      return _.select(this.puzzle, function(a, i) {
        return index === indexFunction(i);
      });
    };

    Sudoku.prototype.rowIndex = function(i) {
      return Math.floor(i / 9);
    };

    Sudoku.prototype.columnIndex = function(i) {
      return i % 9;
    };

    Sudoku.prototype.boxIndex = function(i) {
      var boxColumn, boxRow;
      boxRow = Math.floor(Math.floor(i / 9) / 3);
      boxColumn = Math.floor(i % 9 / 3);
      return boxRow * 3 + boxColumn;
    };

    Sudoku.prototype.solve = function() {
      var index;
      return index = this.firstUnsolvedIndex();
    };

    Sudoku.prototype.firstUnsolvedIndex = function() {
      var result;
      result = false;
      _.each(this.puzzle, function(a, i) {
        if (!result && a === 0) {
          return result = i;
        }
      });
      return result;
    };

    Sudoku.prototype.eliminate_possibilities = function(index) {};

    Sudoku.prototype.getSets = function(index) {};

    return Sudoku;

  })();

  module.exports = Sudoku;

}).call(this);
